import java.util.ArrayList;
import java.util.List;

/**
 * Clase que representa un profesor universitario.
 * Implementa el lado "1" de la relaci√≥n bidireccional 1 a N con Curso.
 * Un profesor puede dictar m√∫ltiples cursos.
 *
 * IMPORTANTE: La relaci√≥n es bidireccional, por lo que al agregar/quitar
 * cursos se debe sincronizar autom√°ticamente con el lado del curso.
 *
 * @author Estudiante UTN - Programaci√≥n II
 * @version 1.0
 */
public class Profesor {
    // Atributos privados (encapsulamiento)
    private String id;
    private String nombre;
    private String especialidad;
    private List<Curso> cursos;  // Lista de cursos que dicta (lado 1:N)

    /**
     * Constructor completo de la clase Profesor.
     * Inicializa la lista de cursos vac√≠a.
     *
     * @param id Identificador √∫nico del profesor
     * @param nombre Nombre completo del profesor
     * @param especialidad √Årea de especializaci√≥n del profesor
     */
    public Profesor(String id, String nombre, String especialidad) {
        this.id = id;
        this.nombre = nombre;
        this.especialidad = especialidad;
        this.cursos = new ArrayList<>();
    }

    // M√©todos getter para acceder a los atributos privados

    /**
     * @return El identificador √∫nico del profesor
     */
    public String getId() {
        return id;
    }

    /**
     * @return El nombre completo del profesor
     */
    public String getNombre() {
        return nombre;
    }

    /**
     * @return La especialidad del profesor
     */
    public String getEspecialidad() {
        return especialidad;
    }

    /**
     * @return La lista de cursos que dicta el profesor
     */
    public List<Curso> getCursos() {
        return cursos;
    }

    /**
     * Agrega un curso a la lista de cursos del profesor.
     * Este m√©todo NO llama a setProfesor para evitar recursi√≥n infinita.
     * La sincronizaci√≥n se hace directamente.
     *
     * IMPORTANTE: Este m√©todo es llamado desde setProfesor del curso.
     *
     * @param c Curso a agregar
     */
    public void agregarCurso(Curso c) {
        // Solo agregar si no est√° en la lista (evitar duplicados)
        if (!cursos.contains(c)) {
            cursos.add(c);
        }
        // NO llamar a c.setProfesor() aqu√≠ para evitar recursi√≥n
        // El curso ya est√° gestionando su propio cambio de profesor
    }

    /**
     * Elimina un curso de la lista de cursos del profesor.
     * Este m√©todo NO llama a setProfesor para evitar recursi√≥n infinita.
     * La sincronizaci√≥n se hace directamente.
     *
     * IMPORTANTE: Este m√©todo es llamado desde setProfesor del curso.
     *
     * @param c Curso a eliminar
     */
    public void eliminarCurso(Curso c) {
        cursos.remove(c);
        // NO llamar a c.setProfesor() aqu√≠ para evitar recursi√≥n
        // El curso ya est√° gestionando su propio cambio de profesor
    }

    /**
     * Lista en consola todos los cursos que dicta el profesor.
     * Muestra el c√≥digo y nombre de cada curso.
     */
    public void listarCursos() {
        System.out.println("\nüìö Cursos de " + nombre + ":");

        if (cursos.isEmpty()) {
            System.out.println("   ‚ö† No tiene cursos asignados.");
        } else {
            for (Curso c : cursos) {
                System.out.println("   ‚Ä¢ " + c.getCodigo() + ": " + c.getNombre());
            }
        }
    }

    /**
     * Muestra en consola la informaci√≥n completa del profesor.
     * Incluye: ID, nombre, especialidad y cantidad de cursos.
     */
    public void mostrarInfo() {
        System.out.println("ID: " + id +
                " | Nombre: " + nombre +
                " | Especialidad: " + especialidad +
                " | Cursos: " + cursos.size());
    }
}